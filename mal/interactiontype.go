/**
 * MIT License
 *
 * Copyright (c) 2020 CNES
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/* 
 * This file has been automatically generated by fr.cnes.mo:StubGenerator_go
 * It has then be slightly transformed to match the underlying type UOctet originally defined in the mal.
 * The mal should eventually use the standard generated definition of the type.
 */
package mal

import (
	"fmt"
)

// Defines InteractionType type
// the generator would define the type as uint32 instead of UOctet
//type InteractionType uint32
const (
	INTERACTIONTYPE_SEND_OVAL = iota
	INTERACTIONTYPE_SEND_NVAL = 1
	INTERACTIONTYPE_SUBMIT_OVAL
	INTERACTIONTYPE_SUBMIT_NVAL = 2
	INTERACTIONTYPE_REQUEST_OVAL
	INTERACTIONTYPE_REQUEST_NVAL = 3
	INTERACTIONTYPE_INVOKE_OVAL
	INTERACTIONTYPE_INVOKE_NVAL = 4
	INTERACTIONTYPE_PROGRESS_OVAL
	INTERACTIONTYPE_PROGRESS_NVAL = 5
	INTERACTIONTYPE_PUBSUB_OVAL
	INTERACTIONTYPE_PUBSUB_NVAL = 6
)

// Conversion table OVAL->NVAL
var nvalTable_InteractionType = []uint32{
	INTERACTIONTYPE_SEND_NVAL,
	INTERACTIONTYPE_SUBMIT_NVAL,
	INTERACTIONTYPE_REQUEST_NVAL,
	INTERACTIONTYPE_INVOKE_NVAL,
	INTERACTIONTYPE_PROGRESS_NVAL,
	INTERACTIONTYPE_PUBSUB_NVAL,
}

// Conversion map NVAL->OVAL
var ovalMap_InteractionType map[uint32]uint32

var (
	INTERACTIONTYPE_SEND     = InteractionType(INTERACTIONTYPE_SEND_NVAL)
	INTERACTIONTYPE_SUBMIT   = InteractionType(INTERACTIONTYPE_SUBMIT_NVAL)
	INTERACTIONTYPE_REQUEST  = InteractionType(INTERACTIONTYPE_REQUEST_NVAL)
	INTERACTIONTYPE_INVOKE   = InteractionType(INTERACTIONTYPE_INVOKE_NVAL)
	INTERACTIONTYPE_PROGRESS = InteractionType(INTERACTIONTYPE_PROGRESS_NVAL)
	INTERACTIONTYPE_PUBSUB   = InteractionType(INTERACTIONTYPE_PUBSUB_NVAL)
)

var NullInteractionType *InteractionType = nil

func init() {
	ovalMap_InteractionType = make(map[uint32]uint32)
	for oval, nval := range nvalTable_InteractionType {
		ovalMap_InteractionType[nval] = uint32(oval)
	}
}

func (receiver InteractionType) GetNumericValue() uint32 {
	//	return uint32(receiver)
	return uint32(uint8(UOctet(receiver)))
}
func (receiver InteractionType) GetOrdinalValue() (uint32, error) {
	nval := receiver.GetNumericValue()
	oval, ok := ovalMap_InteractionType[nval]
	if !ok {
		return 0, fmt.Errorf("Invalid InteractionType value: %d", nval)
	}
	return oval, nil
}

func InteractionTypeFromNumericValue(nval uint32) (InteractionType, error) {
	_, ok := ovalMap_InteractionType[nval]
	if !ok {
		return InteractionType(0), fmt.Errorf("Invalid numeric value for InteractionType: %v", nval)
	}
	return InteractionType(nval), nil
}
func InteractionTypeFromOrdinalValue(oval uint32) (InteractionType, error) {
	if oval >= uint32(len(nvalTable_InteractionType)) {
		return InteractionType(0), fmt.Errorf("Invalid ordinal value for InteractionType: %v", oval)
	}
	return InteractionType(nvalTable_InteractionType[oval]), nil
}

// ================================================================================
// Defines InteractionType type as a MAL Element

//const INTERACTIONTYPE_TYPE_SHORT_FORM Integer = 19
//const INTERACTIONTYPE_SHORT_FORM Long = 0x1000001000013

// Registers InteractionType type for polymorphism handling
func init() {
	RegisterMALElement(INTERACTIONTYPE_SHORT_FORM, NullInteractionType)
}

// Returns the absolute short form of the element type.
func (receiver *InteractionType) GetShortForm() Long {
	return INTERACTIONTYPE_SHORT_FORM
}

// Returns the number of the area this element type belongs to.
func (receiver *InteractionType) GetAreaNumber() UShort {
	return AREA_NUMBER
}

// Returns the version of the area this element type belongs to.
func (receiver *InteractionType) GetAreaVersion() UOctet {
	return AREA_VERSION
}

// Returns the number of the service this element type belongs to.
func (receiver *InteractionType) GetServiceNumber() UShort {
	return NULL_SERVICE_NUMBER
}

// Returns the relative short form of the element type.
func (receiver *InteractionType) GetTypeShortForm() Integer {
	return INTERACTIONTYPE_TYPE_SHORT_FORM
}

// Allows the creation of an element in a generic way, i.e., using the MAL Element polymorphism.
func (receiver *InteractionType) CreateElement() Element {
	return NullInteractionType
}

func (receiver *InteractionType) IsNull() bool {
	return receiver == nil
}

func (receiver *InteractionType) Null() Element {
	return NullInteractionType
}

// Encodes this element using the supplied encoder.
// @param encoder The encoder to use, must not be null.
func (receiver *InteractionType) Encode(encoder Encoder) error {
	specific := encoder.LookupSpecific(INTERACTIONTYPE_SHORT_FORM)
	if specific != nil {
		return specific(receiver, encoder)
	}

	oval, err := receiver.GetOrdinalValue()
	if err != nil {
		return err
	}
	value := NewUOctet(uint8(oval))
	return encoder.EncodeUOctet(value)
}

// Decodes an instance of this element type using the supplied decoder.
// @param decoder The decoder to use, must not be null.
// @return the decoded instance, may be not the same instance as this Element.
func (receiver *InteractionType) Decode(decoder Decoder) (Element, error) {
	specific := decoder.LookupSpecific(INTERACTIONTYPE_SHORT_FORM)
	if specific != nil {
		return specific(decoder)
	}

	elem, err := decoder.DecodeUOctet()
	if err != nil {
		return receiver.Null(), err
	}
	value, err := InteractionTypeFromOrdinalValue(uint32(uint8(*elem)))
	return &value, err
}
