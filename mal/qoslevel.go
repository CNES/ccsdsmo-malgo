/**
 * MIT License
 *
 * Copyright (c) 2020 CNES
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/*
 * This file has been automatically generated by fr.cnes.mo:StubGenerator_go
 * It has then be slightly transformed to match the underlying type UOctet originally defined in the mal.
 * The mal should eventually use the standard generated definition of the type.
 */
package mal

import (
	"fmt"
)

// Defines QoSLevel type

// the generator would define the type as uint32 instead of UOctet
//type QoSLevel uint32
const (
	QOSLEVEL_BESTEFFORT_OVAL = iota
	QOSLEVEL_BESTEFFORT_NVAL = 1
	QOSLEVEL_ASSURED_OVAL
	QOSLEVEL_ASSURED_NVAL = 2
	QOSLEVEL_QUEUED_OVAL
	QOSLEVEL_QUEUED_NVAL = 3
	QOSLEVEL_TIMELY_OVAL
	QOSLEVEL_TIMELY_NVAL = 4
)

// Conversion table OVAL->NVAL
var nvalTable_QoSLevel = []uint32{
	QOSLEVEL_BESTEFFORT_NVAL,
	QOSLEVEL_ASSURED_NVAL,
	QOSLEVEL_QUEUED_NVAL,
	QOSLEVEL_TIMELY_NVAL,
}

// Conversion map NVAL->OVAL
var ovalMap_QoSLevel map[uint32]uint32

var (
	QOSLEVEL_BESTEFFORT = QoSLevel(QOSLEVEL_BESTEFFORT_NVAL)
	QOSLEVEL_ASSURED    = QoSLevel(QOSLEVEL_ASSURED_NVAL)
	QOSLEVEL_QUEUED     = QoSLevel(QOSLEVEL_QUEUED_NVAL)
	QOSLEVEL_TIMELY     = QoSLevel(QOSLEVEL_TIMELY_NVAL)
)

var NullQoSLevel *QoSLevel = nil

func init() {
	ovalMap_QoSLevel = make(map[uint32]uint32)
	for oval, nval := range nvalTable_QoSLevel {
		ovalMap_QoSLevel[nval] = uint32(oval)
	}
}

func (receiver QoSLevel) GetNumericValue() uint32 {
	//  return uint32(receiver)
	return uint32(uint8(UOctet(receiver)))
}
func (receiver QoSLevel) GetOrdinalValue() (uint32, error) {
	nval := receiver.GetNumericValue()
	oval, ok := ovalMap_QoSLevel[nval]
	if !ok {
		return 0, fmt.Errorf("Invalid QoSLevel value: %d", nval)
	}
	return oval, nil
}
func QoSLevelFromNumericValue(nval uint32) (QoSLevel, error) {
	_, ok := ovalMap_QoSLevel[nval]
	if !ok {
		return QoSLevel(0), fmt.Errorf("Invalid numeric value for QoSLevel: %v", nval)
	}
	return QoSLevel(nval), nil
}
func QoSLevelFromOrdinalValue(oval uint32) (QoSLevel, error) {
	if oval >= uint32(len(nvalTable_QoSLevel)) {
		return QoSLevel(0), fmt.Errorf("Invalid ordinal value for QoSLevel: %v", oval)
	}
	return QoSLevel(nvalTable_QoSLevel[oval]), nil
}

// ================================================================================
// Defines QoSLevel type as a MAL Element

//const QOSLEVEL_TYPE_SHORT_FORM Integer = 21
//const QOSLEVEL_SHORT_FORM Long = 0x65000001000015

// Registers QoSLevel type for polymorphism handling
func init() {
	RegisterMALElement(QOSLEVEL_SHORT_FORM, NullQoSLevel)
}

// Returns the absolute short form of the element type.
func (receiver *QoSLevel) GetShortForm() Long {
	return QOSLEVEL_SHORT_FORM
}

// Returns the number of the area this element type belongs to.
func (receiver *QoSLevel) GetAreaNumber() UShort {
	return AREA_NUMBER
}

// Returns the version of the area this element type belongs to.
func (receiver *QoSLevel) GetAreaVersion() UOctet {
	return AREA_VERSION
}

// Returns the number of the service this element type belongs to.
func (receiver *QoSLevel) GetServiceNumber() UShort {
	return NULL_SERVICE_NUMBER
}

// Returns the relative short form of the element type.
func (receiver *QoSLevel) GetTypeShortForm() Integer {
	return QOSLEVEL_TYPE_SHORT_FORM
}

// Allows the creation of an element in a generic way, i.e., using the MAL Element polymorphism.
func (receiver *QoSLevel) CreateElement() Element {
	return NullQoSLevel
}

func (receiver *QoSLevel) IsNull() bool {
	return receiver == nil
}

func (receiver *QoSLevel) Null() Element {
	return NullQoSLevel
}

// Encodes this element using the supplied encoder.
// @param encoder The encoder to use, must not be null.
func (receiver *QoSLevel) Encode(encoder Encoder) error {
	specific := encoder.LookupSpecific(QOSLEVEL_SHORT_FORM)
	if specific != nil {
		return specific(receiver, encoder)
	}

	oval, err := receiver.GetOrdinalValue()
	if err != nil {
		return err
	}
	value := NewUOctet(uint8(oval))
	return encoder.EncodeUOctet(value)
}

// Decodes an instance of this element type using the supplied decoder.
// @param decoder The decoder to use, must not be null.
// @return the decoded instance, may be not the same instance as this Element.
func (receiver *QoSLevel) Decode(decoder Decoder) (Element, error) {
	specific := decoder.LookupSpecific(QOSLEVEL_SHORT_FORM)
	if specific != nil {
		return specific(decoder)
	}

	elem, err := decoder.DecodeUOctet()
	if err != nil {
		return receiver.Null(), err
	}
	value, err := QoSLevelFromOrdinalValue(uint32(uint8(*elem)))
	return &value, err
}
