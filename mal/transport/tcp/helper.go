/**
 * MIT License
 *
 * Copyright (c) 2017 CNES
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package tcp

import (
	"errors"
	. "github.com/CNES/ccsdsmo-malgo/mal"
)

const (
	MAL_SDUTYPE_SEND byte = iota
	MAL_SDUTYPE_SUBMIT
	MAL_SDUTYPE_SUBMIT_ACK
	MAL_SDUTYPE_REQUEST
	MAL_SDUTYPE_REQUEST_RESPONSE
	MAL_SDUTYPE_INVOKE
	MAL_SDUTYPE_INVOKE_ACK
	MAL_SDUTYPE_INVOKE_RESPONSE
	MAL_SDUTYPE_PROGRESS
	MAL_SDUTYPE_PROGRESS_ACK
	MAL_SDUTYPE_PROGRESS_UPDATE
	MAL_SDUTYPE_PROGRESS_RESPONSE
	MAL_SDUTYPE_PUBSUB_REGISTER
	MAL_SDUTYPE_PUBSUB_REGISTER_ACK
	MAL_SDUTYPE_PUBSUB_PUBLISH_REGISTER
	MAL_SDUTYPE_PUBSUB_PUBLISH_REGISTER_ACK
	MAL_SDUTYPE_PUBSUB_PUBLISH
	MAL_SDUTYPE_PUBSUB_NOTIFY
	MAL_SDUTYPE_PUBSUB_DEREGISTER
	MAL_SDUTYPE_PUBSUB_DEREGISTER_ACK
	MAL_SDUTYPE_PUBSUB_PUBLISH_DEREGISTER
	MAL_SDUTYPE_PUBSUB_PUBLISH_DEREGISTER_ACK
)

func encodeSDU(it InteractionType, stage InteractionStage) (byte, error) {
	switch it {
	case MAL_INTERACTIONTYPE_SEND:
		return MAL_SDUTYPE_SEND, nil
	case MAL_INTERACTIONTYPE_SUBMIT:
		if stage == MAL_IP_STAGE_SUBMIT {
			return MAL_SDUTYPE_SUBMIT, nil
		} else {
			return MAL_SDUTYPE_SUBMIT_ACK, nil
		}
	case MAL_INTERACTIONTYPE_REQUEST:
		if stage == MAL_IP_STAGE_REQUEST {
			return MAL_SDUTYPE_REQUEST, nil
		} else {
			return MAL_SDUTYPE_REQUEST_RESPONSE, nil
		}
	case MAL_INTERACTIONTYPE_INVOKE:
		if stage == MAL_IP_STAGE_INVOKE {
			return MAL_SDUTYPE_INVOKE, nil
		} else if stage == MAL_IP_STAGE_INVOKE_ACK {
			return MAL_SDUTYPE_INVOKE_ACK, nil
		} else {
			return MAL_SDUTYPE_INVOKE_RESPONSE, nil
		}
	case MAL_INTERACTIONTYPE_PROGRESS:
		if stage == MAL_IP_STAGE_PROGRESS {
			return MAL_SDUTYPE_PROGRESS, nil
		} else if stage == MAL_IP_STAGE_PROGRESS_ACK {
			return MAL_SDUTYPE_PROGRESS_ACK, nil
		} else if stage == MAL_IP_STAGE_PROGRESS_UPDATE {
			return MAL_SDUTYPE_PROGRESS_UPDATE, nil
		} else {
			return MAL_SDUTYPE_PROGRESS_RESPONSE, nil
		}
	case MAL_INTERACTIONTYPE_PUBSUB:
		if stage == MAL_IP_STAGE_PUBSUB_REGISTER {
			return MAL_SDUTYPE_PUBSUB_REGISTER, nil
		} else if stage == MAL_IP_STAGE_PUBSUB_REGISTER_ACK {
			return MAL_SDUTYPE_PUBSUB_REGISTER_ACK, nil
		} else if stage == MAL_IP_STAGE_PUBSUB_PUBLISH_REGISTER {
			return MAL_SDUTYPE_PUBSUB_PUBLISH_REGISTER, nil
		} else if stage == MAL_IP_STAGE_PUBSUB_PUBLISH_REGISTER_ACK {
			return MAL_SDUTYPE_PUBSUB_PUBLISH_REGISTER_ACK, nil
		} else if stage == MAL_IP_STAGE_PUBSUB_PUBLISH {
			return MAL_SDUTYPE_PUBSUB_PUBLISH, nil
		} else if stage == MAL_IP_STAGE_PUBSUB_NOTIFY {
			return MAL_SDUTYPE_PUBSUB_NOTIFY, nil
		} else if stage == MAL_IP_STAGE_PUBSUB_DEREGISTER {
			return MAL_SDUTYPE_PUBSUB_DEREGISTER, nil
		} else if stage == MAL_IP_STAGE_PUBSUB_DEREGISTER_ACK {
			return MAL_SDUTYPE_PUBSUB_DEREGISTER_ACK, nil
		} else if stage == MAL_IP_STAGE_PUBSUB_PUBLISH_DEREGISTER {
			return MAL_SDUTYPE_PUBSUB_PUBLISH_DEREGISTER, nil
		} else if stage == MAL_IP_STAGE_PUBSUB_PUBLISH_DEREGISTER_ACK {
			return MAL_SDUTYPE_PUBSUB_PUBLISH_DEREGISTER_ACK, nil
		} else {
			return 0xFF, errors.New("Cannot convert to SDU")
		}
	default:
		return 0xFF, errors.New("Cannot convert to SDU")
	}
}

// TODO (AF): Useless, to remove

//func ToInteractionType(sduType byte) (InteractionType, error) {
//	switch sduType {
//	case MAL_SDUTYPE_SEND:
//		return MAL_INTERACTIONTYPE_SEND, nil
//	case MAL_SDUTYPE_SUBMIT:
//	case MAL_SDUTYPE_SUBMIT_ACK:
//		return MAL_INTERACTIONTYPE_SUBMIT, nil
//	case MAL_SDUTYPE_REQUEST:
//	case MAL_SDUTYPE_REQUEST_RESPONSE:
//		return MAL_INTERACTIONTYPE_REQUEST, nil
//	case MAL_SDUTYPE_INVOKE:
//	case MAL_SDUTYPE_INVOKE_ACK:
//	case MAL_SDUTYPE_INVOKE_RESPONSE:
//		return MAL_INTERACTIONTYPE_INVOKE, nil
//	case MAL_SDUTYPE_PROGRESS:
//	case MAL_SDUTYPE_PROGRESS_ACK:
//	case MAL_SDUTYPE_PROGRESS_UPDATE:
//	case MAL_SDUTYPE_PROGRESS_RESPONSE:
//		return MAL_INTERACTIONTYPE_PROGRESS, nil
//	case MAL_SDUTYPE_PUBSUB_REGISTER:
//	case MAL_SDUTYPE_PUBSUB_DEREGISTER:
//	case MAL_SDUTYPE_PUBSUB_PUBLISH_REGISTER:
//	case MAL_SDUTYPE_PUBSUB_PUBLISH:
//	case MAL_SDUTYPE_PUBSUB_NOTIFY:
//	case MAL_SDUTYPE_PUBSUB_PUBLISH_DEREGISTER:
//	case MAL_SDUTYPE_PUBSUB_REGISTER_ACK:
//	case MAL_SDUTYPE_PUBSUB_DEREGISTER_ACK:
//	case MAL_SDUTYPE_PUBSUB_PUBLISH_REGISTER_ACK:
//	case MAL_SDUTYPE_PUBSUB_PUBLISH_DEREGISTER_ACK:
//		return MAL_INTERACTIONTYPE_PUBSUB, nil
//	}
//	return InteractionType(0xFF), errors.New("Cannot decode SDU")
//}

func decodeSDU(sduType byte) (InteractionType, InteractionStage, error) {
	switch sduType {
	case MAL_SDUTYPE_SEND:
		return MAL_INTERACTIONTYPE_SEND, MAL_IP_STAGE_SEND, nil
	case MAL_SDUTYPE_SUBMIT:
		return MAL_INTERACTIONTYPE_SUBMIT, MAL_IP_STAGE_SUBMIT, nil
	case MAL_SDUTYPE_SUBMIT_ACK:
		return MAL_INTERACTIONTYPE_SUBMIT, MAL_IP_STAGE_SUBMIT_ACK, nil
	case MAL_SDUTYPE_REQUEST:
		return MAL_INTERACTIONTYPE_REQUEST, MAL_IP_STAGE_REQUEST, nil
	case MAL_SDUTYPE_REQUEST_RESPONSE:
		return MAL_INTERACTIONTYPE_REQUEST, MAL_IP_STAGE_REQUEST_RESPONSE, nil
	case MAL_SDUTYPE_INVOKE:
		return MAL_INTERACTIONTYPE_INVOKE, MAL_IP_STAGE_INVOKE, nil
	case MAL_SDUTYPE_INVOKE_ACK:
		return MAL_INTERACTIONTYPE_INVOKE, MAL_IP_STAGE_INVOKE_ACK, nil
	case MAL_SDUTYPE_INVOKE_RESPONSE:
		return MAL_INTERACTIONTYPE_INVOKE, MAL_IP_STAGE_INVOKE_RESPONSE, nil
	case MAL_SDUTYPE_PROGRESS:
		return MAL_INTERACTIONTYPE_PROGRESS, MAL_IP_STAGE_PROGRESS, nil
	case MAL_SDUTYPE_PROGRESS_ACK:
		return MAL_INTERACTIONTYPE_PROGRESS, MAL_IP_STAGE_PROGRESS_ACK, nil
	case MAL_SDUTYPE_PROGRESS_UPDATE:
		return MAL_INTERACTIONTYPE_PROGRESS, MAL_IP_STAGE_PROGRESS_UPDATE, nil
	case MAL_SDUTYPE_PROGRESS_RESPONSE:
		return MAL_INTERACTIONTYPE_PROGRESS, MAL_IP_STAGE_PROGRESS_RESPONSE, nil
	case MAL_SDUTYPE_PUBSUB_REGISTER:
		return MAL_INTERACTIONTYPE_PUBSUB, MAL_IP_STAGE_PUBSUB_REGISTER, nil
	case MAL_SDUTYPE_PUBSUB_DEREGISTER:
		return MAL_INTERACTIONTYPE_PUBSUB, MAL_IP_STAGE_PUBSUB_DEREGISTER, nil
	case MAL_SDUTYPE_PUBSUB_PUBLISH_REGISTER:
		return MAL_INTERACTIONTYPE_PUBSUB, MAL_IP_STAGE_PUBSUB_PUBLISH_REGISTER, nil
	case MAL_SDUTYPE_PUBSUB_PUBLISH:
		return MAL_INTERACTIONTYPE_PUBSUB, MAL_IP_STAGE_PUBSUB_PUBLISH, nil
	case MAL_SDUTYPE_PUBSUB_NOTIFY:
		return MAL_INTERACTIONTYPE_PUBSUB, MAL_IP_STAGE_PUBSUB_NOTIFY, nil
	case MAL_SDUTYPE_PUBSUB_PUBLISH_DEREGISTER:
		return MAL_INTERACTIONTYPE_PUBSUB, MAL_IP_STAGE_PUBSUB_PUBLISH_DEREGISTER, nil
	case MAL_SDUTYPE_PUBSUB_REGISTER_ACK:
		return MAL_INTERACTIONTYPE_PUBSUB, MAL_IP_STAGE_PUBSUB_REGISTER_ACK, nil
	case MAL_SDUTYPE_PUBSUB_DEREGISTER_ACK:
		return MAL_INTERACTIONTYPE_PUBSUB, MAL_IP_STAGE_PUBSUB_DEREGISTER_ACK, nil
	case MAL_SDUTYPE_PUBSUB_PUBLISH_REGISTER_ACK:
		return MAL_INTERACTIONTYPE_PUBSUB, MAL_IP_STAGE_PUBSUB_PUBLISH_REGISTER_ACK, nil
	case MAL_SDUTYPE_PUBSUB_PUBLISH_DEREGISTER_ACK:
		return MAL_INTERACTIONTYPE_PUBSUB, MAL_IP_STAGE_PUBSUB_PUBLISH_DEREGISTER_ACK, nil
	default:
		return InteractionType(0xFF), InteractionStage(0xFF), errors.New("Cannot decode SDU")
	}
}
